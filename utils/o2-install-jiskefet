#!/bin/bash

# Convenience script for deploying the flp-standalone role
# It expects the following arguments
# - the target hostname,
# - the connecting user,
# - the with-tests flag (optional)
#
# It takes care of the following:
# 1) It copies the local ssh key to set up passwordless root SSH
#
# 2) It creates the /tmp/ansible-flp-host inventory file
#
# 3) It executes the ansible-playbook command for the role
#
# The values of the ANSIBLE_HTTP_PROXY and ANSIBLE_HTTPS_PROXY 
# env vars will be passed to the relevant playbook 
#

hostname=$1
user=$2
withtests=$3

help() {
  echo -e "\nUsage:\n$0 (hostname) (user) [with-tests] \n"
}

if [[ ( $1 == "--help" ) ||  ( $1 == "-h" ) ]] 
then 
  help
  exit 0
fi

# Check number of arguments
if [[ ($# -lt 2) || ($# -gt 3) ]]
then 
  help
  exit 1
fi 

echo -e "Starting flp-standalone installation at $hostname as $user\n"

# Check that target host is reachable and SSH port open
nc -z $hostname 22
NCCODE=$?
if [[ $NCCODE -ne 0 ]]
then
  echo -e "\nTarget '$hostname' is unreachable. Exiting."
  exit $NCCODE
fi

# Copy ssh-key
echo "Trying to copy ssh key to $user@$hostname"
echo -e "Please provide $user's password unless ssh keys already exist on target machine\n"
ssh-copy-id $user@$hostname

# If ssh-copy-id failed, ask for ssh password through ansible
if [[ $? -ne 0 ]]
then
  echo -e "\nssh-copy-id failed; ansible will ask for ssh password\n"
  ASK_SSHPASS="--ask-pass"
  export ANSIBLE_HOST_KEY_CHECKING=false
fi

if [[ $withtests != "" ]]
then
  WITH_TESTS="-e test=true"
fi

# If user is not root, ask for sudo password through ansible
if [[ $user != "root" ]]
then
  echo -e "\nuser not root; ansible may ask for sudo password\n"
  ASK_BECOMEPASS="--ask-become-pass"
fi

# Create inventory dir under /tmp
INVDIR="/tmp/ansible-hosts/"
mkdir -p $INVDIR

GROUPNAME="jiskefet_frontend"

# Create hosts file
HOSTLINES="[$GROUPNAME]\n$hostname\n"
HOSTFILE="$INVDIR/hosts"
printf "$HOSTLINES" > $HOSTFILE

BACKENDHOSTLINES="\n[jiskefet_backend]\n$hostname remote_privileged_user=$user\n"
printf "$BACKENDHOSTLINES" >> $HOSTFILE

# Create group_vars dir and file
mkdir -p $INVDIR/group_vars
GROUPVARSFILE="$INVDIR/group_vars/$GROUPNAME"
if [[ (! -z $ANSIBLE_HTTP_PROXY) && (! -z $ANSIBLE_HTTPS_PROXY) ]]
then
  PROXYENVLINES="proxy_env:\n  http_proxy: $ANSIBLE_HTTP_PROXY\n  https_proxy: $ANSIBLE_HTTPS_PROXY \n"
else
  PROXYENVLINES="proxy_env: {}"
fi
printf "$PROXYENVLINES" > $GROUPVARSFILE

ANSIBLEPATH="../"
echo "Running ansible recipe..."

# Run ansible
ansible-playbook $ANSIBLEPATH/site.yml -i $HOSTFILE --user $user $ASK_SSHPASS $ASK_BECOMPASS $WITH_TESTS

# Assign return code to variable
ANSIBLECODE=$?

if [[ $ANSIBLECODE == 0 ]]
then
  echo -e "The ansible recipe has finished.\n"

  # Reboot target
  echo "Target may need a reboot for changes to take effect."
fi

# Clean temporary director to avoid permission issues on subsequent executions by different users
#rm -rf $INVDIR

# Exit with Ansible code
exit $ANSIBLECODE
