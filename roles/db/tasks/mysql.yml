# /*
#  * Copyright (C) 2018 Amsterdam University of Applied Sciences (AUAS)
#  *
#  * This software is distributed under the terms of the
#  * GNU General Public Licence version 3 (GPL) version 3,
#  * copied verbatim in the file "LICENSE"
#  */

--- # Install mariadb via ansible on centOS

- name: set the different host groups for the 'host' part of the mysql_user module
  set_fact:
    host_group_with_ansible_hostname:
    - "{{ ansible_hostname }}"
    - 127.0.0.1
    - ::1
    - "%"
    - localhost
    host_group_without:
    - 127.0.0.1
    - ::1
    - "%"
    - localhost

- name: subsequent set_fact is used to select the correct host_group to use for the mysql_user module.
  set_fact:
    host_group: "{{ host_group_without if (ansible_hostname == 'localhost') else host_group_with_ansible_hostname }}"

- name: format the host_group variable and join them together
  set_fact:
    joined_host_group: "'{{  \"', '\".join(host_group) }}'"

- name: Add official MariaDB repository
  become_method: sudo
  become_user: "{{ remote_privileged_user }}"
  yum_repository:
    name: MariaDB
    description: Official MariaDB repository
    baseurl: "https://yum.mariadb.org/10.1/centos7-amd64"
    gpgkey: https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
    gpgcheck: true
  # tags: mariadb

- name: Install packages
  become_method: sudo
  become_user: "{{ remote_privileged_user }}"
  yum:
    name: ['MariaDB', 'MariaDB-server', 'MySQL-python']
    state: installed
  register: yum_output
  notify: enable mariadb on reboot
  # tags: mariadb
  
- name: Start mysql server and enable it on reboot
  become_method: sudo
  become_user: "{{ remote_privileged_user }}"
  service: 
    name: mariadb
    state: started
    enabled: true

- name: make sql directory at /var/lib/jiskefet
  file:
    path: /var/lib/jiskefet/sql
    state: directory
    owner: "{{ jiskefet_user }}"

- name: Copy create_db_charset_utf8mb4.sql from local to remote
  template: 
    src: create_db_charset_utf8mb4.sql.j2 
    dest: /var/lib/jiskefet/sql/create_db_charset_utf8mb4.sql

- name: Copy create_test_db_charset_utf8mb4.sql from local to remote
  template: 
    src: create_test_db_charset_utf8mb4.sql.j2 
    dest: /var/lib/jiskefet/sql/create_test_db_charset_utf8mb4.sql

- name: Copy my.cnf from local to remote
  template:
    src: my.cnf.j2
    dest: /etc/my.cnf
  become_method: su
  become_user: "{{ remote_privileged_user }}"

- name: Set root password
  mysql_user:
    name: root
    host: "{{ item }}"
    password: "{{ mysql_root_password }}" 
    login_user: root
    login_password: "{{ mysql_root_password }}" 
    check_implicit_admin: yes
  with_items:
    - "{{ host_group }}"
  # when: yum_output.results | select('search', 'installed') | list | count != 3 # when statement is used to ensure that the task is only run once

- name: Reload privilege tables
  command: 'mysql -u root -p"{{ mysql_root_password }}" -ne "{{ item }}"'
  with_items:
    - FLUSH PRIVILEGES
  changed_when: False
  # when: yum_output.results | select('search', 'installed') | list | count != 3

- name: Remove anonymous users
  command: 'mysql -u root -p"{{ mysql_root_password }}" -ne "{{ item }}"'
  with_items:
    - DELETE FROM mysql.user WHERE User=''
  changed_when: False
  # when: yum_output.results | select('search', 'installed') | list | count != 3

- name: Disallow root from logging in remotely
  command: 'mysql -u root -p"{{ mysql_root_password }}" -ne "{{ item }}"'
  with_items:
    - DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ({{ joined_host_group }})
  changed_when: False
  # when: yum_output.results | select('search', 'installed') | list | count != 3

- name: Remove test database
  command: 'mysql -u root -p"{{ mysql_root_password }}" -ne "{{ item }}"'
  with_items:
    - DROP DATABASE IF EXISTS test
    - DELETE FROM mysql.db WHERE Db='test'
  changed_when: False
  # when: yum_output.results | select('search', 'installed') | list | count != 3

- name: Create mysql user "{{ jiskefet_api_general_settings.TYPEORM_USERNAME }}"
  mysql_user:
    name: "{{ jiskefet_api_general_settings.TYPEORM_USERNAME }}"
    host: "{{ item }}"
    password: "{{ jiskefet_api_general_settings.TYPEORM_PASSWORD }}"
    login_user: "root"
    login_password: "{{ mysql_root_password }}"
    priv: "{{ jiskefet_api_general_settings.TYPEORM_DATABASE }}.*:ALL,GRANT"
    state: present
  with_items:
    - "{{ host_group }}"

- name: Create mysql test user "{{ jiskefet_api_optional_settings.TEST_DB_USERNAME }}"
  mysql_user:
    name: "{{ jiskefet_api_optional_settings.TEST_DB_USERNAME }}"
    host: "{{ item }}"
    password: "{{ jiskefet_api_optional_settings.TEST_DB_PASSWORD }}"
    login_user: "root"
    login_password: "{{ mysql_root_password }}"
    priv: "{{ jiskefet_api_optional_settings.TEST_DB_DATABASE }}.*:ALL,GRANT"
    state: present
  with_items: 
    - "{{ host_group }}"
  when: 
    not
    ((jiskefet_api_optional_settings.TEST_DB_USERNAME is undefined)
    or
    (jiskefet_api_optional_settings.TEST_DB_USERNAME is none)
    or
    (jiskefet_api_optional_settings.TEST_DB_USERNAME | trim == ''))

- name: Drop database "{{ jiskefet_api_general_settings.TYPEORM_DATABASE }}" (only for testing purposes)
  command: 'mysql -u root -p"{{ mysql_root_password }}" -ne "{{ item }}"'
  with_items:
    - DROP database "{{ jiskefet_api_general_settings.TYPEORM_DATABASE }}"
  tags: ['never', 'recreate_database']

- name: Create database "{{ jiskefet_api_general_settings.TYPEORM_DATABASE }}"
  ignore_errors: yes
  mysql_db: 
    login_user: 'root' 
    login_password: "{{ mysql_root_password }}"
    state: import
    name: 'all'
    target: /var/lib/jiskefet/sql/create_db_charset_utf8mb4.sql
  notify: restart mysql
  tags: 'recreate_database'

- name: Create test database
  ignore_errors: yes
  mysql_db: 
    login_user: 'root' 
    login_password: "{{ mysql_root_password }}"
    state: import
    name: 'all'
    target: /var/lib/jiskefet/sql/create_test_db_charset_utf8mb4.sql
  notify: restart mysql
  when: 
    not
    ((jiskefet_api_optional_settings.TEST_DB_USERNAME is undefined)
    or
    (jiskefet_api_optional_settings.TEST_DB_USERNAME is none)
    or
    (jiskefet_api_optional_settings.TEST_DB_USERNAME | trim == ''))

- name: Add daily backup cron job
  cron:
    name: "jiskefet-db-backup"
    minute: "0"
    hour: "0"
    day: "*"
    weekday: "*"
    month: "*"
    job: '/usr/bin/mysqldump -u{{ jiskefet_api_general_settings.TYPEORM_USERNAME }} -p{{ jiskefet_api_general_settings.TYPEORM_PASSWORD}} {{ jiskefet_api_general_settings.TYPEORM_DATABASE }} > /var/lib/jiskefet/backup-`date +\%Y-\%m-\%dT\%H-\%M-\%S`.sql'
...
