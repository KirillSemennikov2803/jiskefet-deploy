# /*
#  * Copyright (C) 2018 Amsterdam University of Applied Sciences (AUAS)
#  *
#  * This software is distributed under the terms of the
#  * GNU General Public Licence version 3 (GPL) version 3,
#  * copied verbatim in the file "LICENSE"
#  */

---
- name: Check if connection is possible using ssh key
  command: ssh -o User={{ remote_privileged_user }} -o ConnectTimeout=10 {{ item }} echo "Passed"
  register: result_using_key
  connection: local
  ignore_errors: yes
  changed_when: False
  with_items:
    - "{{ online_hosts | json_query(get_online_hosts) }}"
  vars:
    get_online_hosts: "results[*].item.host"

- name: filter result_using_key where host is unable to connect
  debug: 
    var: item
  register: unable_to_connect_hosts_key
  with_items: "{{ result_using_key | json_query(get_host) }}"
  vars:
    get_host: "results[?stdout==''].{ host: item }"

- name: Check if connection is possible using username and password
  command: sshpass -p {{ hostvars[item.item.host].ansible_ssh_pass }} ssh -o User={{ remote_privileged_user }} -o ConnectTimeout=10 -o PreferredAuthentications=password {{ item.item.host }} echo "Passed"
  register: result_using_actual_pass
  connection: local
  ignore_errors: yes
  changed_when: False
  with_items:
    - "{{ unable_to_connect_hosts_key.results }}"
  when: (hostvars[item.item.host].ansible_ssh_pass is defined
        and
        unable_to_connect_hosts_key.results | length > 0)

- name: Check if connection is possible using username without password
  command: sshpass -p "" ssh -o User={{ remote_privileged_user }} -o ConnectTimeout=10 -o PreferredAuthentications=password {{ item.item.host }} echo "Passed"
  register: result_using_non_existing_pass
  connection: local
  ignore_errors: yes
  changed_when: False
  with_items:
    - "{{ unable_to_connect_hosts_key.results }}"
  when: (hostvars[item.item.host].ansible_ssh_pass is undefined
        and
        unable_to_connect_hosts_key.results | length > 0)

- set_fact:
    result_using_pass: "{{ result_using_non_existing_pass if (result_using_actual_pass.results.0.skip_reason is defined) else result_using_actual_pass}}"
  delegate_to: localhost
  when: (result_using_actual_pass.results | length > 0)
        or
        (result_using_non_existing_pass.results | length > 0)

- name: Filter again for username and password
  debug: 
    var: item
  register: unable_to_connect_hosts_pass
  with_items: "{{ result_using_pass | default({}) | json_query(get_host) }}"
  vars:
    get_host: "results[?stdout==''].{host: _ansible_item_label.item.host}"

- set_fact:
    unable_to_connect_to_hosts: "{{ unable_to_connect_hosts_pass if ((unable_to_connect_hosts_pass.results | length) < (unable_to_connect_hosts_key.results | length)) else unable_to_connect_hosts_key}}"
  delegate_to: localhost

- name: unable to connect with ssh
  debug: 
    msg: "Unable to connect to host '{{ item.item.host }}' using ssh. For help, please refer to the documentation at
          https://github.com/SoftwareForScience/jiskefet-deploy/blob/master/docs/setting_up_ssh.md"
  when: ((not item.item.host is undefined)
        or
        (not item.item.host is none)
        or
        (not item.item.host | trim == ''))
        and
        unable_to_connect_to_hosts.results | length > 0
  with_items: "{{ unable_to_connect_to_hosts.results }}"
